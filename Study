1. 데이터베이스의 기본 개념:
  데이터베이스는 정보를 체계적으로 저장, 관리, 검색하고 업데이트할 수 있는 시스템이다.
  일반적으로 데이터베이스는 표 형태로 구성된 테이블을 사용하여 데이터를 저장한다.
  데이터베이스 시스템은 데이터베이스 관리 시스템(DBMS)에 의해 관리된다.

  1.1 데이터베이스 (Database):
    정의: 데이터베이스는 체계적으로 구조화된 데이터의 모임이다. 이는 여러 응용 프로그램이나 사용자들이 공유하고 접근할 수 있도록 정리된 형태로 저장된 정보를 말한다.

    특징:
      체계적인 구조: 데이터베이스는 구조화된 형태로 데이터를 저장하며, 효율적인 검색과 갱신을 가능하게 한다.
      공유 및 동시 접근: 여러 사용자 또는 응용 프로그램이 동시에 같은 데이터베이스에 접근하여 사용할 수 있다.
      실시간 접근성: 실시간 처리에 의한 응답이 가능해야 한다.
      계속적인 변화: 새로운 데이터의 삽입(Insert), 삭제(Delete), 갱신(Update)으로 항상 최신의 데이터를 유지한다.
      내용에 의한 참조: 데이터베이스에 있는 데이터를 참조할 때 사용자의 요구에 따른 데이터 내용으로 데이터를 찾는다.

    생성:
      데이터베이스 생성 (CREATE DATABASE):
        CREATE DATABASE 데이터베이스명;

      데이터베이스 선택 (USE):
        USE 데이터베이스명;

  1.2 테이블 (Table):
    정의: 데이터가 저장되는 기본 구조로, 데이터베이스에서 정보가 표 형태로 구조화된 단위를 말한다. 테이블은 행과 열로 이루어져 있으며, 각 행은 레코드(데이터의 한 단위)를 나타내며, 각 열은 필드 또는 속성을 나타낸다.

    예시: 사용자 정보를 저장하는 테이블은 다음과 같이 생겼을 수 있다.

    ID	이름	나이	이메일
    1	Alice	25	alice@email.com
    2	Bob	30	bob@email.com
    3	Carol	22	carol@email.com

  1.3 스키마 (Schema):
    정의: 데이터베이스의 구조와 제약 조건을 정의하는 개체다. 스키마는 테이블, 필드, 관계, 뷰, 인덱스 등의 객체와 그들 간의 관계를 정의한다.
      인덱스(Index): 데이터베이스 검색 성능을 향상시키기 위해 특정 열에 대한 검색을 빠르게 하는 데이터 구조다.

    예시: 위의 사용자 정보 테이블의 스키마는 다음과 같이 정의될 수 있다.

      CREATE TABLE 테이블명 (
        ID INT PRIMARY KEY,
        이름 VARCHAR(50),
        나이 INT,
        이메일 VARCHAR(100) UNIQUE,
      );

    이 스키마에서 ID는 기본 키(primary key)로 정의되었고, 이메일은 고유(unique)해야 한다.

2. SQL 기초:
  2.1 SQL (Structured Query Language):
    정의: 데이터베이스와 상호 작용하기 위한 표준 언어다. SQL은 데이터의 쿼리, 삽입, 갱신, 삭제, 조회 등 다양한 작업을 수행할 수 있다.

  2.2 기본 SQL 문장:
    SELECT 문장: 데이터 조회를 위해 사용된다.
      SELECT * FROM 테이블명;
	위의 문장은 특정 테이블의 모든 열을 선택하여 조회한다.
      SELECT column1, column2 FROM 테이블명;
    위의 문장은 특정 테이블의 특정 열을 선택하여 조회한다.

    INSERT 문장: 새로운 데이터를 테이블에 삽입한다.
      INSERT INTO 테이블명 (열1, 열2, 열3) VALUES (값1, 값2, 값3);
    위의 문장은 특정 열에 대응하는 값을 가진 새로운 레코드를 삽입한다.

    UPDATE 문장: 기존 데이터를 갱신한다.
      UPDATE 테이블명 SET 열1 = 값1, 열2 = 값2 WHERE 조건;
    위의 문장은 특정 조건에 맞는 레코드의 값을 갱신한다.

    DELETE 문장: 데이터를 삭제한다.
      DELETE FROM 테이블명 WHERE 조건;
    위의 문장은 특정 조건에 맞는 레코드를 삭제한다.

  2.3 조건문 및 정렬:
    WHERE 절: 특정 조건에 맞는 데이터를 선택한다.
      SELECT * FROM 테이블명 WHERE 조건;

    ORDER BY 절: 결과를 특정 열을 기준으로 정렬한다.
      SELECT * FROM 테이블명 ORDER BY 열명 ASC;
    위의 문장은 오름차순(ASC)으로 정렬된다. 내림차순으로 정렬하려면 DESC를 사용한다.

  2.4 추가적인 SQL 문장:
    2.4.1 데이터 조회 및 필터링:
      DISTINCT 절: 중복된 값을 제거하여 고유한 결과만 얻을 때 사용한다.
        SELECT DISTINCT 열명 FROM 테이블명;

      WHERE 절의 비교 연산자: 특정 조건을 기반으로 데이터를 필터링할 때 사용한다.
        SELECT * FROM 테이블명 WHERE 열 > 100 AND 열 < 200;

    2.4.2 집계 함수:
      COUNT 절: 특정 열의 레코드 수를 계산할 때 사용한다.
        SELECT COUNT(*) FROM 테이블명;

      AVG, SUM, MAX, MIN 절: 숫자형 열의 평균, 합계, 최댓값, 최솟값을 계산할 때 사용한다.
        SELECT AVG(숫자열), SUM(숫자열), MAX(숫자열), MIN(숫자열) FROM 테이블명;

    2.4.3 그룹화:
      GROUP BY 절: 특정 열을 기준으로 그룹화하여 그룹 단위로 집계 함수를 사용할 때 사용한다.
        SELECT 열, COUNT(*) FROM 테이블명 GROUP BY 열;

    2.4.4 서브쿼리:
      서브쿼리 사용: 하나의 SQL 문장 안에 또 다른 SQL 문장을 포함하여 사용한다.
        SELECT 열 FROM 테이블명 WHERE 열 IN (SELECT 열 FROM 다른테이블);

      스칼라 서브쿼리: 서브쿼리의 결과가 단일 값을 반환하는 경우 사용된다.
        SELECT 열1, 열2, (SELECT MAX(열3) FROM 다른테이블) AS 최대값
        FROM 테이블명;

      인라인 뷰: 서브쿼리를 사용하여 쿼리 내에 가상의 테이블을 생성한다.
        SELECT * FROM (SELECT 열1, 열2 FROM 테이블명) AS 가상테이블 WHERE 조건;

    2.4.5 인덱스:
      INDEX 생성: 검색 성능을 향상시키기 위해 특정 열에 대한 인덱스를 생성한다.
        CREATE INDEX 인덱스명 ON 테이블명(열);

    2.4.6 조인 (JOIN):
      INNER JOIN 절: 두 개 이상의 테이블에서 일치하는 행을 결합하여 결과를 반환한다.
        SELECT Orders.OrderID, Customers.CustomerName
        FROM Orders
        INNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID;

      LEFT JOIN (또는 LEFT OUTER JOIN), RIGHT JOIN (또는 RIGHT OUTER JOIN): 왼쪽(또는 오른쪽) 테이블의 모든 행을 반환하고, 일치하는 행이 없는 경우 NULL 값을 채운다.
        SELECT Customers.CustomerName, Orders.OrderID
        FROM Customers
        LEFT JOIN Orders ON Customers.CustomerID = Orders.CustomerID;

    2.4.7 테이블 생성과 수정:
      CREATE TABLE 절: 새로운 테이블을 생성한다.
        CREATE TABLE 새로운테이블 (
          열1 INT,
          열2 VARCHAR(50),
          ...
      );

      ALTER TABLE 절: 테이블의 구조를 변경한다. 열 추가, 삭제, 수정 등이 가능하다.
        ALTER TABLE 기존테이블
        ADD COLUMN 새로운열 INT;

    2.4.8 트랜잭션 제어:
      COMMIT 절: 트랜잭션의 변경 사항을 데이터베이스에 반영한다.
        COMMIT;

      ROLLBACK 절: 트랜잭션의 변경 사항을 취소하고 이전 상태로 되돌린다.
        ROLLBACK;

3. 관계형 데이터베이스 (RDBMS):
  3.1 RDBMS 개요:
    정의: RDBMS는 관계형 모델에 기반한 데이터베이스 시스템이다. 이 모델은 테이블 간의 관계를 이용하여 데이터를 구조화한다.

    예시: MySQL, PostgreSQL, SQLite, Oracle 등은 모두 RDBMS의 예시다.

  3.2 관계 (Relationship):
    정의: 테이블 간의 관계는 데이터베이스의 핵심 개념 중 하나다.

    관계 유형:
      일대일 (One-to-One): 한 테이블의 각 레코드가 다른 테이블의 한 레코드에만 매핑된다.
      일대다 (One-to-Many): 한 테이블의 각 레코드가 다른 테이블의 여러 레코드에 매핑된다.
      다대다 (Many-to-Many): 한 테이블의 여러 레코드가 다른 테이블의 여러 레코드와 매핑된다.

  3.3 외래 키 (Foreign Key):
    정의: 다른 테이블의 기본 키(primary key)를 참조하는 열로, 두 테이블 간의 관계를 설정하는 데 사용된다.

    예시:
      CREATE TABLE Orders (
        OrderID INT PRIMARY KEY,
        ProductID INT,
        CustomerID INT,
        FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
        FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)
      );
    위의 예시에서 Orders 테이블의 ProductID와 CustomerID는 각각 Products와 Customers 테이블의 기본 키를 참조한다.

4. 데이터베이스 설계:
  4.1 정규화 (Normalization):
    목적: 데이터의 중복을 최소화하고 데이터 일관성을 유지하기 위한 테이블을 분해하는 프로세스다.

    정규화 수준:
      1NF(1st Normal Form): 각 열은 원자적인 값만을 가지며, 모든 레코드가 고유한 식별자(primary key)를 가져야 한다.
      2NF(2nd Normal Form): 1NF를 만족하면서 모든 열이 기본 키에 완전 종속되어야 한다.
      3NF(3rd Normal Form): 2NF를 만족하면서 기본 키가 아닌 열 간의 종속 관계가 없어야 한다.

  4.2 역정규화 (Denormalization):
    목적: 성능 향상을 위해 정규화된 데이터를 다시 조합하는 과정이다.

    사용 시점: 대량의 데이터를 빠르게 조회하고자 할 때, 일부 정규화를 희생하고 성능을 높이기 위해 사용된다.

    주의 사항: 역정규화는 데이터 일관성을 희생할 수 있으므로 신중하게 적용해야 한다.

5. 트랜잭션과 동시성 제어:
  5.1 트랜잭션 (Transaction):
    정의: 하나 이상의 데이터베이스 작업을 묶어서 원자적으로 수행하는 논리적인 단위다.

    ACID 특성:
      원자성 (Atomicity): 트랜잭션은 성공 또는 실패로 완료되며, 실패 시 이전 상태로 롤백된다.
      일관성 (Consistency): 트랜잭션은 일관된 상태에서 시작하여 일관된 상태로 종료되어야 한다.
      독립성 (Isolation): 여러 트랜잭션이 동시에 실행될 때도 각 트랜잭션은 다른 트랜잭션의 영향을 받지 않아야 한다.
      지속성 (Durability): 트랜잭션이 성공적으로 완료되면 그 결과는 영구적으로 유지되어야 한다.

  5.2 동시성 제어 (Concurrency Control):
    목적: 여러 트랜잭션이 동시에 실행될 때 데이터 일관성을 유지하기 위한 제어 메커니즘이다.

    기법:
      락(Lock): 데이터에 대한 락을 설정하여 여러 트랜잭션이 동시에 수정하는 것을 방지한다.
      트랜잭션 격리 수준(Isolation Level): 트랜잭션 간의 격리 수준을 설정하여 동시성을 조절한다.
